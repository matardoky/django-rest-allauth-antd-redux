{"ast":null,"code":"import \"antd/es/page-header/style\";\nimport _PageHeader from \"antd/es/page-header\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/alert/style\";\nimport _Alert from \"antd/es/alert\";\nvar _jsxFileName = \"/home/diop/Documents/projetSante/src/components/PasswordChange.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { notifReset, passwordChange } from '../store/actions/notifs';\nimport { authLogout } from '../store/actions/auth';\nimport PropTypes from 'prop-types';\n\nclass PasswordChange extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onFinish = value => {\n      this.props.onPasswordChange(value.old_password, value.new_password1, value.new_password2);\n    };\n  }\n\n  render() {\n    const {\n      messageSuccess,\n      messageFail,\n      notifSendSuccess,\n      notifSendFail\n    } = this.props;\n    const description = \"Choisissez un mot de passe sécurisé et ne le réutilisez pas pour d'autres comptes. Si vous modifiez ce mot de passe, vous serez déconnecté de tous vos appareils, sauf ceux que vous utilisez pour prouver votre identité lorsque vous vous connectez.\";\n    return /*#__PURE__*/React.createElement(_PageHeader, {\n      title: \"Mot de passe\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Alert, {\n      type: \"info\",\n      message: description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(_Form, {\n      colon: false,\n      hideRequiredMark: true,\n      onFinish: this.onFinish,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(_Form.Item, {\n      name: \"old_password\",\n      label: \"Mot de passe actuel\",\n      style: {\n        display: \"block\"\n      },\n      rules: [{\n        required: true,\n        message: \"Entrer votre mot de passe actuel\"\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(_Input.Password, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(_Form.Item, {\n      name: \"new_password1\",\n      label: \"Nouveau mot de passe\",\n      style: {\n        display: \"block\"\n      },\n      rules: [{\n        required: true,\n        message: \"Entrer votre nouveau mot de passe\"\n      }],\n      extra: `Niveau de sécurité du mot de passe: Utilisez au moins 8 caractères. Ne choisissez pas un mot de passe que vous utilisez déjà sur un autre site, ni un mot de passe trop évident, tel que le nom de votre animal de compagnie. `,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(_Input.Password, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(_Form.Item, {\n      name: \"new_password2\",\n      label: \"Confimer le nouveau mot de passe\",\n      style: {\n        display: \"block\"\n      },\n      dependencies: ['new_password1'],\n      rules: [{\n        required: true,\n        message: \"Confirmer votre mot de passe\"\n      }, ({\n        getFieldValue\n      }) => ({\n        validator(rules, value) {\n          if (!value || getFieldValue('new_password1') === value) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject('les deux mots de passe ne sont pas identiques');\n        }\n\n      })],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(_Input.Password, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(_Form.Item, {\n      className: \"submitButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(_Button, {\n      key: \"submit\",\n      htmlType: \"submit\",\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 33\n      }\n    }, \"Modifier le mot de passe\")))), messageFail ? _message.error({\n      content: `${notifSendFail}`,\n      className: 'custom-message',\n      style: {\n        marginTop: '62px'\n      }\n    }, () => this.props.onReset()) : null, messageSuccess ? _message.success({\n      content: `${notifSendSuccess}`,\n      className: 'custum-message',\n      style: {\n        marginTop: '62px'\n      }\n    }, () => this.props.authLogout()) : null);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    messageSuccess: state.notifs.messageSuccess,\n    messageFail: state.notifs.messageFail,\n    notifSendSuccess: state.notifs.notifSendSuccess,\n    notifSendFail: state.notifs.notifSendFail\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onPasswordChange: (old_password, new_password1, new_password2) => dispatch(passwordChange(old_password, new_password1, new_password2)),\n    onReset: () => dispatch(notifReset()),\n    authLogout: () => dispatch(authLogout())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordChange);\nPasswordChange.protoType = {\n  messageSuccess: PropTypes.string,\n  messageFail: PropTypes.string,\n  notifSendSuccess: PropTypes.string,\n  notifSendFail: PropTypes.string,\n  onPasswordChange: PropTypes.func.isRequired,\n  onReset: PropTypes.func.isRequired,\n  authLogout: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/diop/Documents/projetSante/src/components/PasswordChange.jsx"],"names":["React","connect","notifReset","passwordChange","authLogout","PropTypes","PasswordChange","Component","onFinish","value","props","onPasswordChange","old_password","new_password1","new_password2","render","messageSuccess","messageFail","notifSendSuccess","notifSendFail","description","display","required","message","getFieldValue","validator","rules","Promise","resolve","reject","error","content","className","style","marginTop","onReset","success","mapStateToProps","state","notifs","mapDispatchToProps","dispatch","protoType","string","func","isRequired"],"mappings":"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","sourcesContent":["import React from 'react' \nimport { connect } from 'react-redux'\nimport { notifReset, passwordChange } from '../store/actions/notifs'\nimport { authLogout } from '../store/actions/auth'\nimport PropTypes from 'prop-types'\nimport { PageHeader, Alert, Form, Button, Input, message } from 'antd'\n\n\nclass PasswordChange extends React.Component {\n\n    onFinish = (value) => {\n        this.props.onPasswordChange(value.old_password, value.new_password1, value.new_password2)\n    }\n    render(){\n        const { messageSuccess, messageFail, notifSendSuccess, notifSendFail} = this.props\n        const description = \"Choisissez un mot de passe sécurisé et ne le réutilisez pas pour d'autres comptes. Si vous modifiez ce mot de passe, vous serez déconnecté de tous vos appareils, sauf ceux que vous utilisez pour prouver votre identité lorsque vous vous connectez.\"\n\n        return (\n                <PageHeader\n                title=\"Mot de passe\"\n                >\n                    <Alert type = \"info\" message = {description}/>\n    \n                    <div>\n                    <Form\n                    colon={false}\n                    hideRequiredMark={true}\n                    onFinish={this.onFinish}\n                    >\n                        <Form.Item\n                            name=\"old_password\"\n                            label=\"Mot de passe actuel\"\n                            style={{\n                                display:\"block\"\n                            }}\n                            rules={[\n                                {\n                                required: true, \n                                message :\"Entrer votre mot de passe actuel\"\n                                },\n    \n                            ]}\n                            >\n                                <Input.Password/>\n    \n                            </Form.Item>\n                            <Form.Item\n                            name=\"new_password1\"\n                            label=\"Nouveau mot de passe\"\n                            style={{\n                                display:\"block\"\n                            }}\n                            rules={[\n                                {\n                                required:true, \n                                message:\"Entrer votre nouveau mot de passe\"\n                                }\n                            ]}\n                            extra={`Niveau de sécurité du mot de passe: Utilisez au moins 8 caractères. Ne choisissez pas un mot de passe que vous utilisez déjà sur un autre site, ni un mot de passe trop évident, tel que le nom de votre animal de compagnie. `}\n                            >\n                                <Input.Password/>\n    \n                            </Form.Item>\n    \n                            <Form.Item\n                            name=\"new_password2\"\n                            label=\"Confimer le nouveau mot de passe\"\n                            style={{\n                                display:\"block\"\n                            }}\n                            dependencies={[\n                                'new_password1',\n    \n                            ]}\n                            rules={[\n                                {\n                                required:true, \n                                message:\"Confirmer votre mot de passe\"\n                                },\n                                ({getFieldValue}) => ({\n                                    validator(rules, value){\n                                        if(!value || getFieldValue('new_password1')===value){\n                                            return Promise.resolve()\n    \n                                        }\n    \n                                        return Promise.reject('les deux mots de passe ne sont pas identiques')\n                                    }\n                                }),\n                            ]}\n                            >\n                                <Input.Password/>\n    \n                            </Form.Item>\n                            \n                            <Form.Item className=\"submitButton\">\n                                \n                                <Button key=\"submit\" htmlType=\"submit\" block>\n                                    Modifier le mot de passe\n                                </Button>\n                            </Form.Item>\n    \n                    </Form>\n    \n                    </div>\n                    {\n                       messageFail ? message.error({\n                           content:`${notifSendFail}`, \n                           className: 'custom-message',\n                           style: {\n                              marginTop:'62px',\n                           }\n                       }\n                      , \n                       ()=>this.props.onReset()): null\n                    }\n\n                    {\n                       messageSuccess ? message.success({\n                           content: `${notifSendSuccess}`,\n                           className:'custum-message', \n                           style: {\n                               marginTop:'62px'\n                           }, \n                       }, \n                       ()=> this.props.authLogout() ):null\n        \n                    }\n    \n                </PageHeader>\n        \n            \n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        messageSuccess: state.notifs.messageSuccess, \n        messageFail: state.notifs.messageFail, \n        notifSendSuccess: state.notifs.notifSendSuccess, \n        notifSendFail:state.notifs.notifSendFail\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onPasswordChange : (old_password, new_password1, new_password2) => dispatch(passwordChange(old_password, new_password1, new_password2)),\n        onReset: () => dispatch (notifReset()), \n        authLogout: () => dispatch(authLogout())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordChange)\n\nPasswordChange.protoType = {\n    messageSuccess : PropTypes.string, \n    messageFail: PropTypes.string, \n    notifSendSuccess: PropTypes.string,\n    notifSendFail: PropTypes.string,\n    onPasswordChange:PropTypes.func.isRequired, \n    onReset: PropTypes.func.isRequired, \n    authLogout:PropTypes.func.isRequired\n}"]},"metadata":{},"sourceType":"module"}