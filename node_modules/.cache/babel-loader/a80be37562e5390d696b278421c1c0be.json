{"ast":null,"code":"import { authUrls } from \"../../Constants\";\nimport axios from 'axios';\n\nconst {\n  authType\n} = require(\"./actionTypes\");\n\nconst chechAuthTimeout = expirationDate => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(authLogout());\n    }, expirationDate * 1000);\n  };\n};\n\nexport const checkAuthState = () => {\n  return dispatch => {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n\n    if (user === undefined || user === null) {\n      dispatch(authLogout());\n    } else {\n      const expirationDate = new Date(user.expirationDate);\n\n      if (expirationDate <= new Date()) {\n        dispatch(authLogout());\n      } else {\n        dispatch(authSuccess(user));\n        dispatch(chechAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};\n\nconst authStart = () => {\n  return {\n    type: authType.AUTH_START\n  };\n};\n\nconst authSuccess = user => {\n  return {\n    type: authType.AUTH_SUCCESS,\n    user\n  };\n};\n\nconst authFail = error => {\n  return {\n    type: authType.AUTH_FAIL,\n    error\n  };\n};\n\nexport const authLogout = () => {\n  localStorage.removeItem(\"user\");\n  return {\n    type: authType.AUTH_LOGOUT\n  };\n};\nexport const authLogin = (email, password) => {\n  return dispatch => {\n    dispatch(authStart);\n    axios.post(authUrls.LOGIN, {\n      email,\n      password\n    }).then(res => {\n      const user = {\n        token: res.data.key,\n        userId: res.data.user,\n        first_name: res.data.user_type.first_name,\n        last_name: res.data.user_type.last_name,\n        isAdmin: res.data.user_type.is_staff,\n        expirationDate: new Date(new Date().getTime() + 3600 * 1000)\n      };\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      dispatch(authSuccess(user));\n      dispatch(chechAuthTimeout(3600));\n    }).catch(error => {\n      dispatch(authFail(error.response.data.non_field_errors[0]));\n    });\n  };\n};","map":{"version":3,"sources":["/home/diop/Documents/projetSante/src/store/actions/auth.jsx"],"names":["authUrls","axios","authType","require","chechAuthTimeout","expirationDate","dispatch","setTimeout","authLogout","checkAuthState","user","JSON","parse","localStorage","getItem","undefined","Date","authSuccess","getTime","authStart","type","AUTH_START","AUTH_SUCCESS","authFail","error","AUTH_FAIL","removeItem","AUTH_LOGOUT","authLogin","email","password","post","LOGIN","then","res","token","data","key","userId","first_name","user_type","last_name","isAdmin","is_staff","setItem","stringify","catch","response","non_field_errors"],"mappings":"AAAA,SAASA,QAAT,QAAyB,iBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeC,OAAO,CAAC,eAAD,CAA5B;;AAKA,MAAMC,gBAAgB,GAAIC,cAAD,IAAoB;AACzC,SAAOC,QAAQ,IAAI;AACfC,IAAAA,UAAU,CAAE,MAAM;AACdD,MAAAA,QAAQ,CAACE,UAAU,EAAX,CAAR;AACH,KAFS,EAEPH,cAAc,GAAC,IAFR,CAAV;AAGH,GAJD;AAKH,CAND;;AAQA,OAAO,MAAMI,cAAc,GAAG,MAAM;AAChC,SAAOH,QAAQ,IAAI;AACf,UAAMI,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;;AACA,QAAKJ,IAAI,KAAKK,SAAT,IAAsBL,IAAI,KAAK,IAApC,EAA0C;AACtCJ,MAAAA,QAAQ,CAACE,UAAU,EAAX,CAAR;AACH,KAFD,MAEK;AACD,YAAMH,cAAc,GAAG,IAAIW,IAAJ,CAASN,IAAI,CAACL,cAAd,CAAvB;;AACA,UAAGA,cAAc,IAAI,IAAIW,IAAJ,EAArB,EAAiC;AAC7BV,QAAAA,QAAQ,CAACE,UAAU,EAAX,CAAR;AACH,OAFD,MAEO;AACHF,QAAAA,QAAQ,CAACW,WAAW,CAACP,IAAD,CAAZ,CAAR;AACAJ,QAAAA,QAAQ,CAAEF,gBAAgB,CAAE,CAAEC,cAAc,CAACa,OAAf,KAA2B,IAAIF,IAAJ,GAAWE,OAAX,EAA7B,IAAoD,IAAtD,CAAlB,CAAR;AACH;AAEJ;AAEJ,GAfD;AAgBH,CAjBM;;AAoBP,MAAMC,SAAS,GAAG,MAAM;AACpB,SAAO;AACHC,IAAAA,IAAI,EAAClB,QAAQ,CAACmB;AADX,GAAP;AAGH,CAJD;;AAMA,MAAMJ,WAAW,GAAIP,IAAD,IAAU;AAC1B,SAAO;AACHU,IAAAA,IAAI,EAAClB,QAAQ,CAACoB,YADX;AAEHZ,IAAAA;AAFG,GAAP;AAIH,CALD;;AAOA,MAAMa,QAAQ,GAAIC,KAAD,IAAW;AACxB,SAAO;AACHJ,IAAAA,IAAI,EAAClB,QAAQ,CAACuB,SADX;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALD;;AASA,OAAO,MAAMhB,UAAU,GAAG,MAAM;AAC5BK,EAAAA,YAAY,CAACa,UAAb,CAAwB,MAAxB;AACA,SAAO;AACHN,IAAAA,IAAI,EAAClB,QAAQ,CAACyB;AADX,GAAP;AAGH,CALM;AAOP,OAAO,MAAMC,SAAS,GAAI,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAOxB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACa,SAAD,CAAR;AACAlB,IAAAA,KAAK,CAAC8B,IAAN,CAAW/B,QAAQ,CAACgC,KAApB,EAA2B;AACvBH,MAAAA,KADuB;AAEvBC,MAAAA;AAFuB,KAA3B,EAICG,IAJD,CAIMC,GAAG,IAAI;AACT,YAAMxB,IAAI,GAAG;AACTyB,QAAAA,KAAK,EAAED,GAAG,CAACE,IAAJ,CAASC,GADP;AAETC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,IAAJ,CAAS1B,IAFR;AAGT6B,QAAAA,UAAU,EAAEL,GAAG,CAACE,IAAJ,CAASI,SAAT,CAAmBD,UAHtB;AAITE,QAAAA,SAAS,EAAEP,GAAG,CAACE,IAAJ,CAASI,SAAT,CAAmBC,SAJrB;AAKTC,QAAAA,OAAO,EAAER,GAAG,CAACE,IAAJ,CAASI,SAAT,CAAmBG,QALnB;AAMTtC,QAAAA,cAAc,EAAE,IAAIW,IAAJ,CAAS,IAAIA,IAAJ,GAAWE,OAAX,KAAqB,OAAK,IAAnC;AANP,OAAb;AAQAL,MAAAA,YAAY,CAAC+B,OAAb,CAAqB,MAArB,EAA6BjC,IAAI,CAACkC,SAAL,CAAenC,IAAf,CAA7B;AACAJ,MAAAA,QAAQ,CAACW,WAAW,CAACP,IAAD,CAAZ,CAAR;AACAJ,MAAAA,QAAQ,CAACF,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACH,KAhBD,EAiBC0C,KAjBD,CAiBOtB,KAAK,IAAI;AACZlB,MAAAA,QAAQ,CAACiB,QAAQ,CAACC,KAAK,CAACuB,QAAN,CAAeX,IAAf,CAAoBY,gBAApB,CAAqC,CAArC,CAAD,CAAT,CAAR;AACH,KAnBD;AAoBH,GAtBD;AAuBH,CAxBM","sourcesContent":["import { authUrls } from \"../../Constants\"\nimport axios from 'axios'\nconst { authType } = require(\"./actionTypes\")\n\n\n\n\nconst chechAuthTimeout = (expirationDate) => {\n    return dispatch => {\n        setTimeout( () => { \n            dispatch(authLogout()) \n        }, expirationDate*1000 )\n    }\n}\n\nexport const checkAuthState = () => {\n    return dispatch => {\n        const user = JSON.parse(localStorage.getItem(\"user\"))\n        if ( user === undefined || user === null) {\n            dispatch(authLogout())\n        }else{\n            const expirationDate = new Date(user.expirationDate)\n            if(expirationDate <= new Date()) {\n                dispatch(authLogout())\n            } else {\n                dispatch(authSuccess(user))\n                dispatch( chechAuthTimeout( ( expirationDate.getTime() - new Date().getTime() )/1000 ) )\n            }\n\n        }\n\n    }\n}\n\n\nconst authStart = () => {\n    return {\n        type:authType.AUTH_START, \n    }\n}\n\nconst authSuccess = (user) => {\n    return {\n        type:authType.AUTH_SUCCESS, \n        user\n    }\n}\n\nconst authFail = (error) => {\n    return {\n        type:authType.AUTH_FAIL, \n        error,\n    }\n}\n\n\n\nexport const authLogout = () => {\n    localStorage.removeItem(\"user\")\n    return {\n        type:authType.AUTH_LOGOUT\n    }\n}\n\nexport const authLogin =  (email, password) => {\n    return dispatch => {\n        dispatch(authStart)\n        axios.post(authUrls.LOGIN, {\n            email, \n            password\n        })\n        .then(res => {\n            const user = {\n                token: res.data.key, \n                userId: res.data.user, \n                first_name: res.data.user_type.first_name, \n                last_name: res.data.user_type.last_name, \n                isAdmin: res.data.user_type.is_staff,\n                expirationDate: new Date(new Date().getTime()+3600*1000)\n            }\n            localStorage.setItem(\"user\", JSON.stringify(user))\n            dispatch(authSuccess(user))\n            dispatch(chechAuthTimeout(3600))\n        })\n        .catch(error => {\n            dispatch(authFail(error.response.data.non_field_errors[0]))\n        })\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}