{"ast":null,"code":"import \"antd/es/row/style\";\nimport _Row from \"antd/es/row\";\nimport \"antd/es/col/style\";\nimport _Col from \"antd/es/col\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/spin/style\";\nimport _Spin from \"antd/es/spin\";\nvar _jsxFileName = \"/home/diop/Documents/projetSante/src/containers/LoginForm.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { authLogin } from '../store/actions/auth';\n\nclass LoginForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onFinish = values => {\n      this.props.onAuth(values.email, values.password);\n    };\n  }\n\n  render() {\n    const {\n      isAuthenticated,\n      loading,\n      error\n    } = this.props;\n\n    if (isAuthenticated) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/dashboard\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"main\", {\n      id: \"main-layout\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, loading ? /*#__PURE__*/React.createElement(_Spin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(_Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Col, {\n      className: \"form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(_Form, {\n      name: \"normal_login\",\n      className: \"login-form\",\n      initialValues: {\n        remember: true\n      },\n      onFinish: this.onFinish,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"titre\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }\n    }, \"Identifiez-vous\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }\n    }, \" \", error), /*#__PURE__*/React.createElement(_Form.Item, {\n      name: \"email\",\n      rules: [{\n        required: true,\n        message: 'Please input your Username!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(_Input, {\n      prefix: /*#__PURE__*/React.createElement(UserOutlined, {\n        className: \"site-form-item-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 38\n        }\n      }),\n      placeholder: \"Adresse e-mail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(_Form.Item, {\n      name: \"password\",\n      rules: [{\n        required: true,\n        message: 'Please input your Password!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(_Input.Password, {\n      prefix: /*#__PURE__*/React.createElement(LockOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 31\n        }\n      }),\n      type: \"password\",\n      placeholder: \"Mot de passe\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(_Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(_Button, {\n      block: true,\n      htmlType: \"submit\",\n      loading: this.props.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 23\n      }\n    }, \"connectez-vous\")), /*#__PURE__*/React.createElement(Link, {\n      to: \"/password-reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, \"mot de passe oubli\\xE9 ?\"))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.token !== null,\n    error: state.auth.error,\n    loading: state.auth.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password) => dispatch(authLogin(email, password))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\nLoginForm.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  loading: PropTypes.bool,\n  error: PropTypes.string,\n  onAuth: PropTypes.func\n};","map":{"version":3,"sources":["/home/diop/Documents/projetSante/src/containers/LoginForm.jsx"],"names":["React","connect","Redirect","Link","PropTypes","UserOutlined","LockOutlined","authLogin","LoginForm","Component","onFinish","values","props","onAuth","email","password","render","isAuthenticated","loading","error","remember","required","message","mapStateToProps","state","auth","token","mapDispatchToProps","dispatch","propTypes","bool","string","func"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect, Link} from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { Form, Input, Button, Row, Col, Spin} from 'antd';\nimport { authLogin } from '../store/actions/auth';\n\nclass LoginForm extends React.Component {\n\n  onFinish = values => {\n    this.props.onAuth(values.email, values.password)\n  }\n\n  render(){\n    const { isAuthenticated, loading, error } = this.props\n    if(isAuthenticated){\n      return <Redirect to ='/dashboard'/>\n    }\n\n    return(\n      <React.Fragment>\n        <main id=\"main-layout\">\n          {\n            loading ? (\n              <Spin/>\n              ):(\n                <Row>\n                <Col className=\"form\">\n                  <Form\n                  name=\"normal_login\"\n                  className=\"login-form\"\n                  initialValues={{ remember: true }}\n                  onFinish={this.onFinish}\n                  >\n                    <h2 className=\"titre\">Identifiez-vous</h2>\n                    <p> {error}</p>\n    \n                    <Form.Item\n                    name=\"email\"\n                    rules={[{ required: true, message: 'Please input your Username!' }]}\n                    >\n                      <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Adresse e-mail\" />\n                    </Form.Item>\n                      \n                    <Form.Item\n                    name=\"password\"\n                    rules={[{ required: true, message: 'Please input your Password!' }]}\n                    >\n                      <Input.Password\n                      prefix={<LockOutlined />}\n                      type=\"password\"\n                      placeholder=\"Mot de passe\"\n                      />\n                    </Form.Item>\n                    <Form.Item>\n                      <Button block htmlType=\"submit\" loading={this.props.loading}>\n                        connectez-vous\n                      </Button>\n                    </Form.Item>\n                    <Link to=\"/password-reset\">mot de passe oublié ?</Link>\n                  </Form>\n                </Col>\n                </Row>\n            )\n          }\n        </main>\n    </React.Fragment>    \n        \n      )\n  }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuthenticated : state.auth.token !==null, \n        error: state.auth.error, \n        loading : state.auth.loading,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAuth: (email , password) => dispatch(authLogin(email, password))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm)\n\n\n\nLoginForm.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  loading: PropTypes.bool, \n  error: PropTypes.string, \n  onAuth: PropTypes.func\n}\n"]},"metadata":{},"sourceType":"module"}